package com.example.mockly

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import com.example.mockly.databinding.FragmentLoginBinding
import com.kakao.sdk.user.UserApiClient
import okhttp3.OkHttpClient
import android.content.Context
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject
import java.io.IOException


class LoginFragment : Fragment() {

    private var _binding: FragmentLoginBinding? = null
    private val binding get() = _binding!!
    private val client = OkHttpClient()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentLoginBinding.inflate(inflater, container, false)

        // ‚úÖ Í≤åÏä§Ìä∏ Î°úÍ∑∏Ïù∏ ‚Üí IntroFragment
        binding.googleLoginButton.setOnClickListener {
            Toast.makeText(requireContext(), "Í≤åÏä§Ìä∏ Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Ï§ë...", Toast.LENGTH_SHORT).show()
            guestLogin()
        }

        // ‚úÖ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
        binding.kakaoLoginButton.setOnClickListener {
            kakaoLogin()
        }

        return binding.root
    }

    private fun kakaoLogin() {
        if (UserApiClient.instance.isKakaoTalkLoginAvailable(requireContext())) {
            UserApiClient.instance.loginWithKakaoTalk(requireContext()) { token, error ->
                if (error != null) {
                    Log.e("KakaoLogin", "Ïπ¥Ïπ¥Ïò§ÌÜ° Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${error.message}")
                    loginWithKakaoAccount()
                } else if (token != null) {
                    Log.i("KakaoLogin", "Ïπ¥Ïπ¥Ïò§ÌÜ° Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ: ${token.accessToken}")
                    goToIntro()
                }
            }
        } else {
            loginWithKakaoAccount()
        }
    }

    private fun loginWithKakaoAccount() {
        UserApiClient.instance.loginWithKakaoAccount(requireContext()) { token, error ->
            if (error != null) {
                Toast.makeText(requireContext(), "Ïπ¥Ïπ¥Ïò§ Í≥ÑÏ†ï Î°úÍ∑∏Ïù∏ Ïã§Ìå®", Toast.LENGTH_SHORT).show()
            } else if (token != null) {
                goToIntro()
            }
        }
    }

    private fun guestLogin() {
        val adminCode = "b91c260571b524bf1e433c81cdc05d9d68bcbc2bd32b63124ab11ebf1cf8cf4d"
        val bodyJson = JSONObject().apply { put("adminCode", adminCode) }

        val requestBody = bodyJson.toString().toRequestBody("application/json".toMediaType())
        val request = Request.Builder()
            .url("http://13.209.230.38/auth/login/admin")
            .post(requestBody)
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onResponse(call: Call, response: Response) {
                val responseBody = response.body?.string() ?: ""
                val json = JSONObject(responseBody)
                val data = json.optJSONObject("data")
                val token = data?.optString("accessToken") ?: ""

                if (token.isNotEmpty()) {
                    // üîπ 1Îã®Í≥Ñ: ÌÜ†ÌÅ∞ Ï†ÄÏû•
                    val prefs = requireActivity().getSharedPreferences("mockly_prefs", Context.MODE_PRIVATE)
                    prefs.edit().putString("token", token).commit()

                    // üîπ 2Îã®Í≥Ñ: Ìè¨Ïù∏Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞ API Ìò∏Ï∂ú
                    getUserPoint(token) {
                        activity?.runOnUiThread {
                            Toast.makeText(requireContext(), "‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ", Toast.LENGTH_SHORT).show()
                            goToIntro()
                        }
                    }
                } else {
                    activity?.runOnUiThread {
                        Toast.makeText(requireContext(), "‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå® (ÌÜ†ÌÅ∞ ÏóÜÏùå)", Toast.LENGTH_SHORT).show()
                    }
                }
            }

            override fun onFailure(call: Call, e: IOException) {
                Log.e("GuestLogin", "‚ùå ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®", e)
            }
        })
    }
    private fun getUserPoint(token: String, onComplete: () -> Unit) {
        val pointRequest = Request.Builder()
            .url("http://13.209.230.38/points/me")
            .addHeader("Authorization", "Bearer $token")
            .get()
            .build()

        client.newCall(pointRequest).enqueue(object : Callback {
            override fun onResponse(call: Call, response: Response) {
                val responseBody = response.body?.string() ?: ""
                val json = JSONObject(responseBody)
                val point = json.optInt("pointAmount", 0)

                Log.d("PointFetch", "‚úÖ Î∞õÏùÄ Ìè¨Ïù∏Ìä∏: $point")

                val prefs = requireActivity().getSharedPreferences("mockly_prefs", Context.MODE_PRIVATE)
                prefs.edit().putInt("point", point).apply()

                onComplete()
            }

            override fun onFailure(call: Call, e: IOException) {
                Log.e("PointFetch", "‚ùå Ìè¨Ïù∏Ìä∏ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®", e)
                onComplete()
            }
        })
    }


    private fun goToIntro() {
        if (!isAdded || activity == null) return
        (activity as? MainActivity)?.showIntroFragment()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}